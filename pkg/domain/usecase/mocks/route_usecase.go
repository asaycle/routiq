// Code generated by MockGen. DO NOT EDIT.
// Source: route_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/asaycle/routiq.git/pkg/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockRouteUsecase is a mock of RouteUsecase interface.
type MockRouteUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRouteUsecaseMockRecorder
}

// MockRouteUsecaseMockRecorder is the mock recorder for MockRouteUsecase.
type MockRouteUsecaseMockRecorder struct {
	mock *MockRouteUsecase
}

// NewMockRouteUsecase creates a new mock instance.
func NewMockRouteUsecase(ctrl *gomock.Controller) *MockRouteUsecase {
	mock := &MockRouteUsecase{ctrl: ctrl}
	mock.recorder = &MockRouteUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteUsecase) EXPECT() *MockRouteUsecaseMockRecorder {
	return m.recorder
}

// CreateRoute mocks base method.
func (m *MockRouteUsecase) CreateRoute(ctx context.Context, name, desc, geoJSON string) (*entity.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", ctx, name, desc, geoJSON)
	ret0, _ := ret[0].(*entity.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute.
func (mr *MockRouteUsecaseMockRecorder) CreateRoute(ctx, name, desc, geoJSON interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockRouteUsecase)(nil).CreateRoute), ctx, name, desc, geoJSON)
}

// GetRoute mocks base method.
func (m *MockRouteUsecase) GetRoute(ctx context.Context, name string) (*entity.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute", ctx, name)
	ret0, _ := ret[0].(*entity.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute.
func (mr *MockRouteUsecaseMockRecorder) GetRoute(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockRouteUsecase)(nil).GetRoute), ctx, name)
}

// ListRoutes mocks base method.
func (m *MockRouteUsecase) ListRoutes(ctx context.Context) ([]*entity.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutes", ctx)
	ret0, _ := ret[0].([]*entity.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutes indicates an expected call of ListRoutes.
func (mr *MockRouteUsecaseMockRecorder) ListRoutes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutes", reflect.TypeOf((*MockRouteUsecase)(nil).ListRoutes), ctx)
}
