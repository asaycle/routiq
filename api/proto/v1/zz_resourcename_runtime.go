// Code generated by protoc-gen-go-resourcename; DO NOT EDIT.
package routiq

import (
	"errors"
	"strings"
)

type _segKind uint8

const (
	_segLit _segKind = iota
	_segVar
)

type _seg struct {
	k _segKind
	s string
}
type _pattern []_seg

func _match(segs []string, idx int, p _pattern, vars map[string]string) (bool, int, map[string]string) {
	if len(p) == 0 {
		return true, idx, vars
	}
	if idx >= len(segs) {
		return false, idx, vars
	}
	h, t := p[0], p[1:]
	switch h.k {
	case _segLit:
		if segs[idx] != h.s {
			return false, idx, vars
		}
		return _match(segs, idx+1, t, vars)
	case _segVar:
		v := segs[idx]
		if v == "" {
			return false, idx, vars
		}
		if vars == nil {
			vars = make(map[string]string)
		}
		vars[h.s] = v
		return _match(segs, idx+1, t, vars)
	default:
		return false, idx, vars
	}
}

func _parseByVariants(name string, variants [][]_pattern) (map[string]string, int, error) {
	segs := strings.Split(name, "/")
	for i, ps := range variants {
		for _, p := range ps {
			if ok, consumed, vars := _match(segs, 0, p, nil); ok && consumed == len(segs) {
				return vars, i, nil
			}
		}
	}
	return nil, -1, errors.New("invalid resource name")
}
