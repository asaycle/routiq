// Code generated by protoc-gen-go-resourcename; DO NOT EDIT.
package routiq

// Pref patterns
type PrefNameVariant int

const (
	PrefNameVariant0 PrefNameVariant = 0 // prefs/{pref}
)

var _PrefVariants = [][]_pattern{
	{_pattern{_seg{_segLit, "prefs"}, _seg{_segVar, "pref"}}},
}

type PrefName struct {
	Variant PrefNameVariant
	pref    string
}

func ParsePrefName(name string) (PrefName, error) {
	vars, which, err := _parseByVariants(name, _PrefVariants)
	if err != nil {
		return PrefName{}, err
	}
	out := PrefName{Variant: PrefNameVariant(which)}
	out.pref = vars["pref"]
	return out, nil
}

func FormatPrefName(pref string) string {
	return "prefs" + "/" + pref
}

func (n PrefName) GetPref() string { return n.pref }

// City patterns
type CityNameVariant int

const (
	CityNameVariant0 CityNameVariant = 0 // prefs/{pref}/cities/{city}
)

var _CityVariants = [][]_pattern{
	{_pattern{_seg{_segLit, "prefs"}, _seg{_segVar, "pref"}, _seg{_segLit, "cities"}, _seg{_segVar, "city"}}},
}

type CityName struct {
	Variant CityNameVariant
	pref    string
	city    string
}

func ParseCityName(name string) (CityName, error) {
	vars, which, err := _parseByVariants(name, _CityVariants)
	if err != nil {
		return CityName{}, err
	}
	out := CityName{Variant: CityNameVariant(which)}
	out.pref = vars["pref"]
	out.city = vars["city"]
	return out, nil
}

func FormatCityName(pref string, city string) string {
	return "prefs" + "/" + pref + "/" + "cities" + "/" + city
}

func (n CityName) GetPref() string { return n.pref }

func (n CityName) GetCity() string { return n.city }

// Location patterns
type LocationNameVariant int

const (
	LocationNameVariant0 LocationNameVariant = 0 // locations/{location}
)

var _LocationVariants = [][]_pattern{
	{_pattern{_seg{_segLit, "locations"}, _seg{_segVar, "location"}}},
}

type LocationName struct {
	Variant  LocationNameVariant
	location string
}

func ParseLocationName(name string) (LocationName, error) {
	vars, which, err := _parseByVariants(name, _LocationVariants)
	if err != nil {
		return LocationName{}, err
	}
	out := LocationName{Variant: LocationNameVariant(which)}
	out.location = vars["location"]
	return out, nil
}

func FormatLocationName(location string) string {
	return "locations" + "/" + location
}

func (n LocationName) GetLocation() string { return n.location }
