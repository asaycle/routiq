// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: v1/riding.proto

package routiq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RidingService_CreateRiding_FullMethodName = "/asaycle.routiq.v1.RidingService/CreateRiding"
	RidingService_ListRidings_FullMethodName  = "/asaycle.routiq.v1.RidingService/ListRidings"
	RidingService_GetRiding_FullMethodName    = "/asaycle.routiq.v1.RidingService/GetRiding"
)

// RidingServiceClient is the client API for RidingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RidingService 定義
type RidingServiceClient interface {
	CreateRiding(ctx context.Context, in *CreateRidingRequest, opts ...grpc.CallOption) (*Riding, error)
	ListRidings(ctx context.Context, in *ListRidingsRequest, opts ...grpc.CallOption) (*ListRidingsResponse, error)
	GetRiding(ctx context.Context, in *GetRidingRequest, opts ...grpc.CallOption) (*Riding, error)
}

type ridingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRidingServiceClient(cc grpc.ClientConnInterface) RidingServiceClient {
	return &ridingServiceClient{cc}
}

func (c *ridingServiceClient) CreateRiding(ctx context.Context, in *CreateRidingRequest, opts ...grpc.CallOption) (*Riding, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Riding)
	err := c.cc.Invoke(ctx, RidingService_CreateRiding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ridingServiceClient) ListRidings(ctx context.Context, in *ListRidingsRequest, opts ...grpc.CallOption) (*ListRidingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRidingsResponse)
	err := c.cc.Invoke(ctx, RidingService_ListRidings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ridingServiceClient) GetRiding(ctx context.Context, in *GetRidingRequest, opts ...grpc.CallOption) (*Riding, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Riding)
	err := c.cc.Invoke(ctx, RidingService_GetRiding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RidingServiceServer is the server API for RidingService service.
// All implementations must embed UnimplementedRidingServiceServer
// for forward compatibility.
//
// RidingService 定義
type RidingServiceServer interface {
	CreateRiding(context.Context, *CreateRidingRequest) (*Riding, error)
	ListRidings(context.Context, *ListRidingsRequest) (*ListRidingsResponse, error)
	GetRiding(context.Context, *GetRidingRequest) (*Riding, error)
	mustEmbedUnimplementedRidingServiceServer()
}

// UnimplementedRidingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRidingServiceServer struct{}

func (UnimplementedRidingServiceServer) CreateRiding(context.Context, *CreateRidingRequest) (*Riding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRiding not implemented")
}
func (UnimplementedRidingServiceServer) ListRidings(context.Context, *ListRidingsRequest) (*ListRidingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRidings not implemented")
}
func (UnimplementedRidingServiceServer) GetRiding(context.Context, *GetRidingRequest) (*Riding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiding not implemented")
}
func (UnimplementedRidingServiceServer) mustEmbedUnimplementedRidingServiceServer() {}
func (UnimplementedRidingServiceServer) testEmbeddedByValue()                       {}

// UnsafeRidingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RidingServiceServer will
// result in compilation errors.
type UnsafeRidingServiceServer interface {
	mustEmbedUnimplementedRidingServiceServer()
}

func RegisterRidingServiceServer(s grpc.ServiceRegistrar, srv RidingServiceServer) {
	// If the following call pancis, it indicates UnimplementedRidingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RidingService_ServiceDesc, srv)
}

func _RidingService_CreateRiding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRidingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RidingServiceServer).CreateRiding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RidingService_CreateRiding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RidingServiceServer).CreateRiding(ctx, req.(*CreateRidingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RidingService_ListRidings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRidingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RidingServiceServer).ListRidings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RidingService_ListRidings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RidingServiceServer).ListRidings(ctx, req.(*ListRidingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RidingService_GetRiding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRidingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RidingServiceServer).GetRiding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RidingService_GetRiding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RidingServiceServer).GetRiding(ctx, req.(*GetRidingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RidingService_ServiceDesc is the grpc.ServiceDesc for RidingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RidingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asaycle.routiq.v1.RidingService",
	HandlerType: (*RidingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRiding",
			Handler:    _RidingService_CreateRiding_Handler,
		},
		{
			MethodName: "ListRidings",
			Handler:    _RidingService_ListRidings_Handler,
		},
		{
			MethodName: "GetRiding",
			Handler:    _RidingService_GetRiding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/riding.proto",
}
