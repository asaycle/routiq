// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/touring.proto

package routiq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TouringService_CreateTouring_FullMethodName = "/asaycle.routiq.v1.TouringService/CreateTouring"
	TouringService_ListTourings_FullMethodName  = "/asaycle.routiq.v1.TouringService/ListTourings"
	TouringService_GetTouring_FullMethodName    = "/asaycle.routiq.v1.TouringService/GetTouring"
)

// TouringServiceClient is the client API for TouringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TouringService 定義
type TouringServiceClient interface {
	CreateTouring(ctx context.Context, in *CreateTouringRequest, opts ...grpc.CallOption) (*Touring, error)
	ListTourings(ctx context.Context, in *ListTouringsRequest, opts ...grpc.CallOption) (*ListTouringsResponse, error)
	GetTouring(ctx context.Context, in *GetTouringRequest, opts ...grpc.CallOption) (*GetTouringResponse, error)
}

type touringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTouringServiceClient(cc grpc.ClientConnInterface) TouringServiceClient {
	return &touringServiceClient{cc}
}

func (c *touringServiceClient) CreateTouring(ctx context.Context, in *CreateTouringRequest, opts ...grpc.CallOption) (*Touring, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Touring)
	err := c.cc.Invoke(ctx, TouringService_CreateTouring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touringServiceClient) ListTourings(ctx context.Context, in *ListTouringsRequest, opts ...grpc.CallOption) (*ListTouringsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTouringsResponse)
	err := c.cc.Invoke(ctx, TouringService_ListTourings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touringServiceClient) GetTouring(ctx context.Context, in *GetTouringRequest, opts ...grpc.CallOption) (*GetTouringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTouringResponse)
	err := c.cc.Invoke(ctx, TouringService_GetTouring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TouringServiceServer is the server API for TouringService service.
// All implementations must embed UnimplementedTouringServiceServer
// for forward compatibility.
//
// TouringService 定義
type TouringServiceServer interface {
	CreateTouring(context.Context, *CreateTouringRequest) (*Touring, error)
	ListTourings(context.Context, *ListTouringsRequest) (*ListTouringsResponse, error)
	GetTouring(context.Context, *GetTouringRequest) (*GetTouringResponse, error)
	mustEmbedUnimplementedTouringServiceServer()
}

// UnimplementedTouringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTouringServiceServer struct{}

func (UnimplementedTouringServiceServer) CreateTouring(context.Context, *CreateTouringRequest) (*Touring, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTouring not implemented")
}
func (UnimplementedTouringServiceServer) ListTourings(context.Context, *ListTouringsRequest) (*ListTouringsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTourings not implemented")
}
func (UnimplementedTouringServiceServer) GetTouring(context.Context, *GetTouringRequest) (*GetTouringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTouring not implemented")
}
func (UnimplementedTouringServiceServer) mustEmbedUnimplementedTouringServiceServer() {}
func (UnimplementedTouringServiceServer) testEmbeddedByValue()                        {}

// UnsafeTouringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TouringServiceServer will
// result in compilation errors.
type UnsafeTouringServiceServer interface {
	mustEmbedUnimplementedTouringServiceServer()
}

func RegisterTouringServiceServer(s grpc.ServiceRegistrar, srv TouringServiceServer) {
	// If the following call pancis, it indicates UnimplementedTouringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TouringService_ServiceDesc, srv)
}

func _TouringService_CreateTouring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTouringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouringServiceServer).CreateTouring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TouringService_CreateTouring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouringServiceServer).CreateTouring(ctx, req.(*CreateTouringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouringService_ListTourings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTouringsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouringServiceServer).ListTourings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TouringService_ListTourings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouringServiceServer).ListTourings(ctx, req.(*ListTouringsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouringService_GetTouring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTouringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouringServiceServer).GetTouring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TouringService_GetTouring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouringServiceServer).GetTouring(ctx, req.(*GetTouringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TouringService_ServiceDesc is the grpc.ServiceDesc for TouringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TouringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asaycle.routiq.v1.TouringService",
	HandlerType: (*TouringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTouring",
			Handler:    _TouringService_CreateTouring_Handler,
		},
		{
			MethodName: "ListTourings",
			Handler:    _TouringService_ListTourings_Handler,
		},
		{
			MethodName: "GetTouring",
			Handler:    _TouringService_GetTouring_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/touring.proto",
}
