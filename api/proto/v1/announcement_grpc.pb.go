// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/announcement.proto

package routiq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnnouncementService_ListAnnouncements_FullMethodName = "/asaycle.routiq.v1.AnnouncementService/ListAnnouncements"
	AnnouncementService_GetAnnouncement_FullMethodName   = "/asaycle.routiq.v1.AnnouncementService/GetAnnouncement"
)

// AnnouncementServiceClient is the client API for AnnouncementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// サービス定義
type AnnouncementServiceClient interface {
	// GET /v1/announcements
	ListAnnouncements(ctx context.Context, in *ListAnnouncementsRequest, opts ...grpc.CallOption) (*ListAnnouncementsResponse, error)
	// GET /v1/{name=announcements/*}
	GetAnnouncement(ctx context.Context, in *GetAnnouncementRequest, opts ...grpc.CallOption) (*Announcement, error)
}

type announcementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncementServiceClient(cc grpc.ClientConnInterface) AnnouncementServiceClient {
	return &announcementServiceClient{cc}
}

func (c *announcementServiceClient) ListAnnouncements(ctx context.Context, in *ListAnnouncementsRequest, opts ...grpc.CallOption) (*ListAnnouncementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAnnouncementsResponse)
	err := c.cc.Invoke(ctx, AnnouncementService_ListAnnouncements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announcementServiceClient) GetAnnouncement(ctx context.Context, in *GetAnnouncementRequest, opts ...grpc.CallOption) (*Announcement, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Announcement)
	err := c.cc.Invoke(ctx, AnnouncementService_GetAnnouncement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnouncementServiceServer is the server API for AnnouncementService service.
// All implementations must embed UnimplementedAnnouncementServiceServer
// for forward compatibility.
//
// サービス定義
type AnnouncementServiceServer interface {
	// GET /v1/announcements
	ListAnnouncements(context.Context, *ListAnnouncementsRequest) (*ListAnnouncementsResponse, error)
	// GET /v1/{name=announcements/*}
	GetAnnouncement(context.Context, *GetAnnouncementRequest) (*Announcement, error)
	mustEmbedUnimplementedAnnouncementServiceServer()
}

// UnimplementedAnnouncementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnnouncementServiceServer struct{}

func (UnimplementedAnnouncementServiceServer) ListAnnouncements(context.Context, *ListAnnouncementsRequest) (*ListAnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnnouncements not implemented")
}
func (UnimplementedAnnouncementServiceServer) GetAnnouncement(context.Context, *GetAnnouncementRequest) (*Announcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncement not implemented")
}
func (UnimplementedAnnouncementServiceServer) mustEmbedUnimplementedAnnouncementServiceServer() {}
func (UnimplementedAnnouncementServiceServer) testEmbeddedByValue()                             {}

// UnsafeAnnouncementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnouncementServiceServer will
// result in compilation errors.
type UnsafeAnnouncementServiceServer interface {
	mustEmbedUnimplementedAnnouncementServiceServer()
}

func RegisterAnnouncementServiceServer(s grpc.ServiceRegistrar, srv AnnouncementServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnnouncementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnnouncementService_ServiceDesc, srv)
}

func _AnnouncementService_ListAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnouncementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).ListAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnouncementService_ListAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).ListAnnouncements(ctx, req.(*ListAnnouncementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnouncementService_GetAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnouncementServiceServer).GetAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnouncementService_GetAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnouncementServiceServer).GetAnnouncement(ctx, req.(*GetAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnnouncementService_ServiceDesc is the grpc.ServiceDesc for AnnouncementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnouncementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asaycle.routiq.v1.AnnouncementService",
	HandlerType: (*AnnouncementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAnnouncements",
			Handler:    _AnnouncementService_ListAnnouncements_Handler,
		},
		{
			MethodName: "GetAnnouncement",
			Handler:    _AnnouncementService_GetAnnouncement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/announcement.proto",
}
