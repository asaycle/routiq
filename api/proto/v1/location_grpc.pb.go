// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: v1/location.proto

package routiq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LocationService_ListPrefs_FullMethodName  = "/asaycle.routiq.v1.LocationService/ListPrefs"
	LocationService_GetPref_FullMethodName    = "/asaycle.routiq.v1.LocationService/GetPref"
	LocationService_ListCities_FullMethodName = "/asaycle.routiq.v1.LocationService/ListCities"
	LocationService_GetCity_FullMethodName    = "/asaycle.routiq.v1.LocationService/GetCity"
)

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationServiceClient interface {
	ListPrefs(ctx context.Context, in *ListPrefsRequest, opts ...grpc.CallOption) (*ListPrefsResponse, error)
	GetPref(ctx context.Context, in *GetPrefRequest, opts ...grpc.CallOption) (*Pref, error)
	ListCities(ctx context.Context, in *ListCitiesRequest, opts ...grpc.CallOption) (*ListCitiesResponse, error)
	GetCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*City, error)
}

type locationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationServiceClient(cc grpc.ClientConnInterface) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) ListPrefs(ctx context.Context, in *ListPrefsRequest, opts ...grpc.CallOption) (*ListPrefsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrefsResponse)
	err := c.cc.Invoke(ctx, LocationService_ListPrefs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetPref(ctx context.Context, in *GetPrefRequest, opts ...grpc.CallOption) (*Pref, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pref)
	err := c.cc.Invoke(ctx, LocationService_GetPref_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) ListCities(ctx context.Context, in *ListCitiesRequest, opts ...grpc.CallOption) (*ListCitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCitiesResponse)
	err := c.cc.Invoke(ctx, LocationService_ListCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, LocationService_GetCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationServiceServer is the server API for LocationService service.
// All implementations must embed UnimplementedLocationServiceServer
// for forward compatibility
type LocationServiceServer interface {
	ListPrefs(context.Context, *ListPrefsRequest) (*ListPrefsResponse, error)
	GetPref(context.Context, *GetPrefRequest) (*Pref, error)
	ListCities(context.Context, *ListCitiesRequest) (*ListCitiesResponse, error)
	GetCity(context.Context, *GetCityRequest) (*City, error)
	mustEmbedUnimplementedLocationServiceServer()
}

// UnimplementedLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocationServiceServer struct {
}

func (UnimplementedLocationServiceServer) ListPrefs(context.Context, *ListPrefsRequest) (*ListPrefsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrefs not implemented")
}
func (UnimplementedLocationServiceServer) GetPref(context.Context, *GetPrefRequest) (*Pref, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPref not implemented")
}
func (UnimplementedLocationServiceServer) ListCities(context.Context, *ListCitiesRequest) (*ListCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCities not implemented")
}
func (UnimplementedLocationServiceServer) GetCity(context.Context, *GetCityRequest) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCity not implemented")
}
func (UnimplementedLocationServiceServer) mustEmbedUnimplementedLocationServiceServer() {}

// UnsafeLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServiceServer will
// result in compilation errors.
type UnsafeLocationServiceServer interface {
	mustEmbedUnimplementedLocationServiceServer()
}

func RegisterLocationServiceServer(s grpc.ServiceRegistrar, srv LocationServiceServer) {
	s.RegisterService(&LocationService_ServiceDesc, srv)
}

func _LocationService_ListPrefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ListPrefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_ListPrefs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ListPrefs(ctx, req.(*ListPrefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetPref_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetPref(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_GetPref_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetPref(ctx, req.(*GetPrefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_ListCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ListCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_ListCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ListCities(ctx, req.(*ListCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_GetCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetCity(ctx, req.(*GetCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationService_ServiceDesc is the grpc.ServiceDesc for LocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asaycle.routiq.v1.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPrefs",
			Handler:    _LocationService_ListPrefs_Handler,
		},
		{
			MethodName: "GetPref",
			Handler:    _LocationService_GetPref_Handler,
		},
		{
			MethodName: "ListCities",
			Handler:    _LocationService_ListCities_Handler,
		},
		{
			MethodName: "GetCity",
			Handler:    _LocationService_GetCity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/location.proto",
}
